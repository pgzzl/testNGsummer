{
  "package": "model",
  "name": "carTest",
  "methods": [
    {
      "annotations": "@BeforeTest(alwaysRun = true)",
      "name": "public void beforeTest()",
      "function": "MockitoAnnotations.initMocks(this);\n        String test =this.getClass().getName();\n        String id=prepareData(test);"
    },
    {
      "annotations": "",
      "name": "public String prepareData(String key)",
      "function": "System.out.println(key);\n        return key;"
    },
    {
      "annotations": "",
      "name": "public static List<Map<String, Object>> loadData(String key)",
      "function": "        Jedis jedis = new Jedis(\"127.0.0.1\", 6379);\n        ObjectMapper objectMapper = new ObjectMapper();\n        long len = jedis.llen(key);\n        List<Map<String, Object>> Objs = new ArrayList<>();\n        try {\n            while (len-- > 0) {\n                Map map = objectMapper.readValue(jedis.lpop(key), Map.class);\n                Objs.add(map);\n            }\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        } finally {\n            jedis.close();\n            return Objs;\n        }"
    },
    {
      "annotations": "@Test(groups = \"groupGet\")",
      "name": "public void getByPKTest()",
      "function": "String testid = \"1\";\n        #Object#DO #object#do = new #Obeject#DO();\n        #object#.setID(testid);\n        Mockito.when(#object#.selectByPrimaryKey(testid)).thenReturn(#object#);\n        Assert.assertEquals(#object#Service.getByPK(testid).getID(), testid, \"不相等\");"
    },
    {
      "annotations": "@Test(groups = \"getGet\", dependsOnMethods = \"getByPKTest\")",
      "name": "public void getSimpleMapByPKTest()",
      "function": "String testid = mockParams.get(\"id\").toString();\n        Map<String, Object> res = object.buildMap(objectService.getByPK(testid));\n       Assert.assertEquals(object.getSimpleMapByPK(testid), res, \"getSimpleMapByPK不相等\");"
    },
    {
      "annotations": "@Test(groups = \"groupGet\", dependsOnMethods = \"getByPKTest\")",
      "name": "public void getDetailMapByPKTestIsNull()",
      "function": "String testid = \"1\";\n        when(#object#Service.getByPK(testid)).thenReturn(null);\n        Assert.assertEquals(null, #object#Service.getDetailMapByPK(testid), \"异常\");"
    },
    {
      "annotations": "@Test(groups = \"groupGet\")",
      "name": "public void getCountByFilterTest()",
      "function": "        Long count = 0L;\n        Mockito.doReturn(mockParams).when(#object#filterMapper).buildMap();\n        #object#DOExample example = #object#Filter.initDOQueryFilter(mockParams);\n        Mockito.doReturn(count).when(#object#dao).countByExample(example);\n        Assert.assertEquals(count, #object#Service.getCountByFilter(#object#filterMapper), \"异常\");\n"
    },
    {
      "annotations": "@Test(groups = \"groupGet\")",
      "name": "public void getListByFilterTest()",
      "function": "List<#Object#> entityList = new ArrayList<>();\n        Mockito.doReturn(mockParams).when(filterMapper).buildMap();\n        #Object#DOExample example = #Object#Filter.initDOQueryFilter(mockParams);\n\n        List<#Object#> res = mock(List.class);\n        Mockito.doReturn(res).when(#object#dao).selectByExample(example);\n        Iterator iteratorMock = mock(Iterator.class);\n        Mockito.when(res.iterator()).thenReturn(iteratorMock);\n        Mockito.when(iteratorMock.hasNext()).thenReturn(true, false);\n        Mockito.when(iteratorMock.next()).thenReturn(entityList);\n        Assert.assertEquals(entityList, #object#Service.getListByFilter(filterMapper), \"异常\");"
    },
    {
      "annotations": "Test(groups = \"groupGet\")",
      "name": "public void getListByRelatedIdTestIsZero()",
      "function": "List<String> idList = new ArrayList<>();\n        List<#Object#> entityList = new ArrayList<>();\n        Assert.assertEquals(entityList, #object#Service.getListByRelatedId(idList), \"failure\");"
    },
    {
      "annotations": "@Test(groups = \"groupGet\")",
      "name": "public void getListByRelatedIdTest()",
      "function": "List<String> idList = new ArrayList<>();\n        idList.add(\"1\");\n        List<#Object#> entityList = new ArrayList<>();\n        Mockito.doReturn(mockParams).when(filterMapper).buildMap();\n        #Object#DOExample example = #Object#Filter.initIdQueryFilter(idList);\n        List<#Object#> res = mock(List.class);\n        Mockito.doReturn(res).when(#object#ao).selectByExample(example);\n        Iterator iteratorMock = mock(Iterator.class);\n        Mockito.when(res.iterator()).thenReturn(iteratorMock);\n        Mockito.when(iteratorMock.hasNext()).thenReturn(true, false);\n        Mockito.when(iteratorMock.next()).thenReturn(entityList);"
    },
    {
      "annotations": "@Test(groups = \"groupGet\", dependsOnMethods = \"getListByFilterTest\")",
      "name": "public void getFilterMapListTest()",
      "function": "List<Map<String, Object>> entityMapList = new ArrayList<>();\n        List<#Object#> t1 = mock(ArrayList.class);\n        List<#Object#> t2 = null;\n        when(#object#Service.getListByFilter(filterMapper)).thenReturn(t1);\n        Mockito.doAnswer(new Answer() {\n            @Override\n            public #Object# answer(InvocationOnMock invocationOnMock) throws Throwable {\n                Object argument = invocationOnMock.getArgument(0);\n                #Object#.class.getDeclaredMethod(\"accept\", #Object#.class).invoke(argument, 1);\n                return argument;\n            }\n        }).when(t1).forEach(entity -> entityMapList.add(#Object#SimpleMapper.buildMap(entity)));\n        Assert.assertEquals(entityMapList, #object#Service.getFilterMapList(filterMapper), \"异常\");"
    },
    {
      "annotations": "@Test(groups = \"groupPost\", dependsOnMethods = \"getByPKTest\", expectedExceptions = StatusException.class)",
      "name": "public void postTestException()",
      "function": "StatusException e = new StatusException(\"POST_ENTITY_DUPLICATE\");\n        #object# = new #Object#();\n        when(#object#dao.insertSelective(#Object#Data.convert(#object#, new #Object#DO()))).thenThrow(e);\n        #Object# res = #object#Service.post(#object#);\n        throw e;"
    },
    {
      "annotations": "@Test(groups = \"groupPost\", dependsOnMethods = \"getByPKTest\")",
      "name": "public void postTest()",
      "function": " #Object# spy#Object# = Mockito.spy(test);\n        when(#object#dao.insertSelective(#Object#Data.convert(test, new #Object#DO()))).thenReturn(1);\n        #Object# res = #object#Service.post(#Object#);"
    },
    {
      "annotations": "@Test(groups = \"groupUpadte\", dependsOnMethods = \"getByPKTest\", expectedExceptions = NullPointerException.class)",
      "name": "public void updateTest()",
      "function": "int actual = 1;\n        when(#object#dao.updateByPrimaryKeySelective(#Object#Data.convert(#object#, new #Object#DO()))).thenReturn(1);\n        Assert.assertEquals(actual, #object#dao.updateByPrimaryKeySelective(#Object#Data.convert(#object#, new #Object#DO())), \"不相等\");\n"
    },
    {
      "annotations": "Test(groups = \"groupPut\", dependsOnMethods = \"getByPKTest\")",
      "name": "public void putTestIsNull()",
      "function": "#Object# putEntity=new #Object#();\n        putEntity.setId(\"1\");\n        Object actual=null;\n        when(#object#Service.getByPK(putEntity.getId())).thenReturn(null);\n        when(#Object#dao.insertSelective(#Object#Data.convert(putEntity, new #Object#DO()))).thenReturn(1);\n        Assert.assertEquals(actual,#object#Service.put(putEntity),\"不相等\");"
    },
    {
      "annotations": "@Test(groups = \"groupDelete\")",
      "name": "public void deleteTest()",
      "function": "String testid = \"1\";\n        AtomicInteger count = new AtomicInteger();\n        when(count.addAndGet(#object#dao.deleteByPrimaryKey(testid))).thenReturn(1);\n        int actual = #object#Service.delete(testid);\n        Assert.assertEquals(actual, 1, \"不相等\");"
    },
    {
      "annotations": "@Test(groups = \"groupGet\", dependsOnMethods = \"getCountByFilterTest\")",
      "name": "public void getRateAndCountByFilterTest()",
      "function": "Map<String, Map<String, Object>> res = new HashMap<>();\n        List<String> groupBy = mock(List.class);\n        res = #object#Service.getFilterListGroup(filterMapper, groupBy);\n        Assert.assertEquals(res.size(), 0, \"不相等\");"
    }
  ]
}